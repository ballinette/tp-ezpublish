#!/bin/bash
set -e

export ORIGPASSWD=$(cat /etc/passwd | grep www-data)
export ORIG_UID=$(echo $ORIGPASSWD | cut -f3 -d:)
export ORIG_GID=$(echo $ORIGPASSWD | cut -f4 -d:)

export DEV_UID=${DEV_UID:=$ORIG_UID}
export DEV_GID=${DEV_GID:=$ORIG_GID}

if [ "$DEV_GID" -ne $ORIG_GID ]; then
    groupmod -g "$DEV_GID" www-data
    find /usr/ -group $ORIG_GID -exec chgrp -h "$DEV_GID" {} \;
    find /var/ -group $ORIG_GID -exec chgrp -h "$DEV_GID" {} \;
fi

if [ "$DEV_UID" -ne $ORIG_UID ]; then
    usermod -u "$DEV_UID" -g "$DEV_GID" www-data
    find /usr/ -uid $ORIG_UID -exec chown "$DEV_UID" {} \;
    find /var/ -uid $ORIG_UID -exec chown "$DEV_UID" {} \;
fi

# Note: we don't just use "apache2ctl" here because it itself is just a shell-script wrapper around apache2 which provides extra functionality like "apache2ctl start" for launching apache2 in the background.
# (also, when run as "apache2ctl <apache args>", it does not use "exec", which leaves an undesirable resident shell process)

: "${APACHE_CONFDIR:=/etc/apache2}"
: "${APACHE_ENVVARS:=$APACHE_CONFDIR/envvars}"
if test -f "$APACHE_ENVVARS"; then
	. "$APACHE_ENVVARS"
fi

# Apache gets grumpy about PID files pre-existing
: "${APACHE_PID_FILE:=${APACHE_RUN_DIR:=/var/run/apache2}/apache2.pid}"
rm -f "$APACHE_PID_FILE"

exec apache2 -DFOREGROUND "$@"
